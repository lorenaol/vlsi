USER SYMBOL by DSCH 3.5
DATE 5/18/2022 10:14:01 PM
SYM  #ArithmeticUnit
BB(0,0,40,110)
TITLE 10 -7  #ArithmeticUnit
MODEL 6000
REC(5,5,30,100)
PIN(0,20,0.00,0.00)B3
PIN(0,60,0.00,0.00)AddSub
PIN(0,10,0.00,0.00)EnableAlu
PIN(0,100,0.00,0.00)A0
PIN(0,90,0.00,0.00)A1
PIN(0,80,0.00,0.00)A2
PIN(0,70,0.00,0.00)A3
PIN(0,50,0.00,0.00)B0
PIN(0,40,0.00,0.00)B1
PIN(0,30,0.00,0.00)B2
PIN(40,10,2.00,1.00)IB_Alu[3]
PIN(40,20,2.00,1.00)IB_Alu[2]
PIN(40,30,2.00,1.00)IB_Alu[1]
PIN(40,40,2.00,1.00)IB_Alu[0]
PIN(40,50,2.00,1.00)Carry
LIG(0,20,5,20)
LIG(0,60,5,60)
LIG(0,10,5,10)
LIG(0,100,5,100)
LIG(0,90,5,90)
LIG(0,80,5,80)
LIG(0,70,5,70)
LIG(0,50,5,50)
LIG(0,40,5,40)
LIG(0,30,5,30)
LIG(35,10,40,10)
LIG(35,20,40,20)
LIG(35,30,40,30)
LIG(35,40,40,40)
LIG(35,50,40,50)
LIG(5,5,5,105)
LIG(5,5,35,5)
LIG(35,5,35,105)
LIG(35,105,5,105)
VLG module ArithmeticUnit( B3,AddSub,EnableAlu,A0,A1,A2,A3,B0,
VLG  B1,B2,IB_Alu[3],IB_Alu[2],IB_Alu[1],IB_Alu[0],Carry);
VLG  input B3,AddSub,EnableAlu,A0,A1,A2,A3,B0;
VLG  input B1,B2;
VLG  output IB_Alu[3],IB_Alu[2],IB_Alu[1],IB_Alu[0],Carry;
VLG  wire w7,w9,w11,w13,w15,w16,w17,w18;
VLG  wire w20,w21,w22,w24,w26,w28,w29,w31;
VLG  wire w33,w34,w35,w36;
VLG  not #(1) inv_1(w7,A3);
VLG  not #(1) inv_2(w9,A2);
VLG  not #(1) inv_3(w11,A1);
VLG  not #(1) inv_4(w13,A0);
VLG  mux #(2) mux_5(w15,A3,w7,AddSub);
VLG  mux #(2) mux_6(w16,A2,w9,AddSub);
VLG  mux #(2) mux_7(w17,A1,w11,AddSub);
VLG  mux #(2) mux_8(w18,A0,w13,AddSub);
VLG  mux #(2) mux_9(w26,vss,vdd,AddSub);
VLG  bufif1 #(1) bufif1_10(IB_Alu[0],w31,EnableAlu);
VLG  bufif1 #(1) bufif1_11(IB_Alu[1],w29,EnableAlu);
VLG  bufif1 #(1) bufif1_12(IB_Alu[2],w21,EnableAlu);
VLG  bufif1 #(1) bufif1_13(IB_Alu[3],w24,EnableAlu);
VLG  xor #(2) xor2_1_14(w33,B2,w16);
VLG  xor #(2) xor2_2_15(w21,w33,w20);
VLG  assign w22=(B2&w16)|(w20&(B2|w16));
VLG  xor #(2) xor2_1_16(w34,B3,w15);
VLG  xor #(2) xor2_2_17(w24,w34,w22);
VLG  assign Carry=(B3&w15)|(w22&(B3|w15));
VLG  xor #(2) xor2_1_18(w35,B1,w17);
VLG  xor #(2) xor2_2_19(w29,w35,w28);
VLG  assign w20=(B1&w17)|(w28&(B1|w17));
VLG  xor #(2) xor2_1_20(w36,B0,w18);
VLG  xor #(2) xor2_2_21(w31,w36,w26);
VLG  assign w28=(B0&w18)|(w26&(B0|w18));
VLG endmodule
FSYM
